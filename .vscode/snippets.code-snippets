{
	// Place your codingDojo-student-portal workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// 
	// HTML *************************************************
	"html flash msg with categories": {
		"prefix": "my_flash_msg_w_cat",
		"scope": "html",
		"body": [
			"{% for message in get_flashed_messages(category_filter=[\"err_${1:err name}\"]) %}",
			"<p class=\"alert bg-my-danger text-white\">{{ message }}</p>",
			"{% endfor %}"
		],
		"description": "html flash msg with categories"
	},
	// PYTHON ************************************************
	"cd controller": {
		"prefix": "my_controller",
		"scope": "python",
		"body": [
			"from flask_app import app",
			"from flask import render_template, redirect, session, request, jsonify",
			"",
			"from flask_app.models import model_${1:table name}",
			"",
			"@app.route('/${1:table name}/new')          ",
			"@login_required",
			"def ${1:table name}_new():",
			"    return render_template('${1:table name}_new.html')",
			"",
			"@app.route('/${1:table name}/create', methods=['POST'])          ",
			"@login_required",
			"def ${1:table name}_create():",
			"    return redirect('/')",
			"",
			"@app.route('/${1:table name}/<int:id>')          ",
			"@login_required",
			"def ${1:table name}_show(id):",
			"    return render_template('${1:table name}_show.html')",
			"",
			"@app.route('/${1:table name}/<int:id>/edit')          ",
			"@login_required",
			"def ${1:table name}_edit(id):",
			"    return render_template('${1:table name}_edit.html')",
			"",
			"@app.route('/${1:table name}/<int:id>/update', methods=['POST'])          ",
			"@login_required",
			"def ${1:table name}_update(id):",
			"    return redirect('/')",
			"",
			"@app.route('/api/${1:table name}/<int:id>/update', methods=['POST'])          ",
			"@login_required",
			"def api_${1:table name}_update(id):",
			"    all_errors = {}",
			"",
			"    input_dict = {",
			"        '${2:input_name}': model_${1:table name}.${3:table name (CAPS) }.validate_${2:input_name}_api, ",
			"        }",
			"",
			"    for item in input_dict:",
			"        if item in request.form:",
			"            errors = input_dict[item](request.form)",
			"            if len(errors) > 0:",
			"                for key in errors:",
			"                    all_errors[key] = errors[key]",
			"",
			"    if len(all_errors):",
			"        res = {",
			"            'status': 404,",
			"            'errors': all_errors",
			"        }",
			"        return jsonify(res)",
			"    model_${1:table name}.${3:table name (CAPS) }.update_one(**request.form, id=id)",
			"    res = {",
			"        'status': 200",
			"    }",
			"    return jsonify(res)"
		"",
			"@app.route('/${1:table name}/<int:id>/delete')          ",
			"@login_required",
			"def ${1:table name}_delete(id):",
			"    return redirect('/')",
			""
		],
		"description": "cd controller"
	},
	"flask modal table": {
		"prefix": "my_flask_modal_table",
		"scope": "python",
		"body": [
			"from flask_app.config.mysqlconnection import connectToMySQL",
			"from flask import flash",
			"from flask_app.models import model_base, model_user",
			"from flask_app import DATABASE_SCHEMA",
			"import re",
			"",
			"class ${1:table name}(model_base.base_model):",
			"    table = '${1:table name}s'",
			"    def __init__(self, data):",
			"        super().__init__(data)",
		],
		"description": "flask modal table"
	},
	"action_route": {
		"prefix": "my_flask_action_route",
		"body": [
		  "@app.route('/${1:table}/<iny:id>/${2:action}', methods=['POST'])          ",
		  "@login_required",
		  "def ${1:table}_${2:action}(id):",
		  "    return redirect('${3:return route}')"
		],
		"description": "action_route"
	  }
}